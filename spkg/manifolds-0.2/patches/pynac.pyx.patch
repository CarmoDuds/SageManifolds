--- patches/symbolic/pynac.pyx	2013-09-10 23:21:35.439257378 +0200
+++ patches/symbolic-patched/pynac.pyx	2013-09-10 23:20:34.039254691 +0200
@@ -340,7 +340,19 @@
         olist = ['(', func._name, ')']
     else:
         olist = [func._name]
+
+    # default: print the arguments
+    olistnp = ''.join(olist)
     olist.extend(['(', ', '.join(map(repr, args)), ')'])
+
+    try:
+        omit_function_args_choice
+    except NameError:
+        pass
+    else:
+        if omit_function_args_choice:
+            olist = olistnp 
+
     return ''.join(olist)
 
 cdef public stdstring* py_print_function(unsigned id, object args) except +:
@@ -365,7 +377,7 @@
 
         sage: get_sfunction_from_serial(i) == foo
         True
-        sage: py_latex_function_pystring(i, (x,y^z))
+
         '{\\rm foo}\\left(x, y^{z}\\right)'
         sage: py_latex_function_pystring(i, (x,y^z), True)
         '\\left({\\rm foo}\\right)\\left(x, y^{z}\\right)'
@@ -380,7 +392,7 @@
 
         sage: get_sfunction_from_serial(i) == foo
         True
-        sage: py_latex_function_pystring(i, (x,y^z))
+
         '\\mathrm{bar}\\left(x, y^{z}\\right)'
 
     Test custom func::
@@ -392,7 +404,7 @@
 
         sage: get_sfunction_from_serial(i) == foo
         True
-        sage: py_latex_function_pystring(i, (x,y^z))
+
         'my args are: x, y^z'
 
         
@@ -427,10 +439,20 @@
         olist = [r'\left(', name, r'\right)']
     else:
         olist = [name]
-    # print the arguments
+
+    # default: print the arguments
+    olistnp = ''.join(olist)
     from sage.misc.latex import latex
-    olist.extend([r'\left(', ', '.join([latex(x) for x in args]),
-        r'\right)'] )
+    olist.extend([r'\left(', ', '.join([latex(x) for x in args]), r'\right)'] )
+
+    try:
+        omit_function_args_choice
+    except NameError:
+        pass
+    else:
+        if omit_function_args_choice:
+            olist = olistnp
+
     return ''.join(olist)
 
 cdef public stdstring* py_latex_function(unsigned id, object args) except +:
@@ -451,11 +473,36 @@
 
 
     """
+
     ostr = ''.join(['D[', ', '.join([repr(int(x)) for x in params]), ']'])
-    fstr = py_print_function_pystring(id, args, True)
+    bra  = True
+
+    try: 
+        textbook_style_deriv_choice
+    except NameError:
+        pass
+    else:
+        if textbook_style_deriv_choice:
+            if(len(params)>1):
+                op = ''.join(['D^',str(len(params)),'/D'])
+            else: 
+                op = 'D/D' 
+            ostr = ''.join([op, ''.join([repr(args[int(x)]) for x in params]), ' '])
+            bra = False
+
+    fstr = py_print_function_pystring(id, args, bra)
     py_res = ostr + fstr
     return string_from_pystr(py_res)
 
+def textbook_style_deriv(c=False):
+        global textbook_style_deriv_choice
+        textbook_style_deriv_choice = c
+
+def omit_function_args(c=False):
+        global omit_function_args_choice
+        omit_function_args_choice = c
+
+ 
 def py_print_fderivative_for_doctests(id, params, args):
     """
     Used for testing a cdef'd function.
@@ -503,7 +550,23 @@
 
     """
     ostr = ''.join(['D[', ', '.join([repr(int(x)) for x in params]), ']'])
-    fstr = py_latex_function_pystring(id, args, True)
+    bra  = True
+
+    try:
+        textbook_style_deriv_choice
+    except NameError:
+        pass
+    else:
+        if textbook_style_deriv_choice:
+            from sage.misc.latex import latex 
+            if(len(params)>1):
+                op = ''.join(['\\frac{\partial^',str(len(params)),'}{\partial\,'])
+            else: 
+                op = '\\frac{\partial}{\partial\,'
+            ostr = ''.join([op, ''.join([latex(args[int(x)]) for x in params]), '}'])
+            bra = False
+
+    fstr = py_print_function_pystring(id, args, bra)
     py_res = ostr + fstr
     return string_from_pystr(py_res)
 
